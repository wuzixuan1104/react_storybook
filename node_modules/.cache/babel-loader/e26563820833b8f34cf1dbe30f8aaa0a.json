{"ast":null,"code":"import _objectSpread from \"/Users/chestnuter/www/React/taskbox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createStore } from \"redux\"; // The actions are the \"names\" of the changes that can happen to the store\n\nexport const actions = {\n  ARCHIVE_TASK: \"ARCHIVE_TASK\",\n  PIN_TASK: \"PIN_TASK\"\n}; // The action creators bundle actions with the data required to execute them\n\nexport const archiveTask = id => ({\n  type: actions.ARCHIVE_TASK,\n  id\n});\nexport const pinTask = id => ({\n  type: actions.PIN_TASK,\n  id\n}); // All our reducers simply change the state of a single task.\n\nfunction taskStateReducer(taskState) {\n  return (state, action) => {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      tasks: state.tasks.map(task => task.id === action.id ? _objectSpread(_objectSpread({}, task), {}, {\n        state: taskState\n      }) : task)\n    });\n  };\n} // The reducer describes how the contents of the store change for each action\n\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case actions.ARCHIVE_TASK:\n      return taskStateReducer(\"TASK_ARCHIVED\")(state, action);\n\n    case actions.PIN_TASK:\n      return taskStateReducer(\"TASK_PINNED\")(state, action);\n\n    default:\n      return state;\n  }\n}; // The initial state of our store when the app loads.\n// Usually you would fetch this from a server\n\nconst defaultTasks = [{\n  id: \"1\",\n  title: \"Something\",\n  state: \"TASK_INBOX\"\n}, {\n  id: \"2\",\n  title: \"Something more\",\n  state: \"TASK_INBOX\"\n}, {\n  id: \"3\",\n  title: \"Something else\",\n  state: \"TASK_INBOX\"\n}, {\n  id: \"4\",\n  title: \"Something again\",\n  state: \"TASK_INBOX\"\n}]; // We export the constructed redux store\n\nexport default createStore(reducer, {\n  tasks: defaultTasks\n});","map":{"version":3,"sources":["/Users/chestnuter/www/React/taskbox/src/lib/redux.js"],"names":["createStore","actions","ARCHIVE_TASK","PIN_TASK","archiveTask","id","type","pinTask","taskStateReducer","taskState","state","action","tasks","map","task","reducer","defaultTasks","title"],"mappings":";AAAA,SAASA,WAAT,QAA4B,OAA5B,C,CAEA;;AACA,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,YAAY,EAAE,cADO;AAErBC,EAAAA,QAAQ,EAAE;AAFW,CAAhB,C,CAKP;;AACA,OAAO,MAAMC,WAAW,GAAGC,EAAE,KAAK;AAAEC,EAAAA,IAAI,EAAEL,OAAO,CAACC,YAAhB;AAA8BG,EAAAA;AAA9B,CAAL,CAAtB;AACP,OAAO,MAAME,OAAO,GAAGF,EAAE,KAAK;AAAEC,EAAAA,IAAI,EAAEL,OAAO,CAACE,QAAhB;AAA0BE,EAAAA;AAA1B,CAAL,CAAlB,C,CAEP;;AACA,SAASG,gBAAT,CAA0BC,SAA1B,EAAqC;AACnC,SAAO,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxB,2CACKD,KADL;AAEEE,MAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAgBC,IAAI,IACzBA,IAAI,CAACT,EAAL,KAAYM,MAAM,CAACN,EAAnB,mCAA6BS,IAA7B;AAAmCJ,QAAAA,KAAK,EAAED;AAA1C,WAAwDK,IADnD;AAFT;AAMD,GAPD;AAQD,C,CAED;;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAQA,MAAM,CAACL,IAAf;AACE,SAAKL,OAAO,CAACC,YAAb;AACE,aAAOM,gBAAgB,CAAC,eAAD,CAAhB,CAAkCE,KAAlC,EAAyCC,MAAzC,CAAP;;AACF,SAAKV,OAAO,CAACE,QAAb;AACE,aAAOK,gBAAgB,CAAC,aAAD,CAAhB,CAAgCE,KAAhC,EAAuCC,MAAvC,CAAP;;AACF;AACE,aAAOD,KAAP;AANJ;AAQD,CATM,C,CAWP;AACA;;AACA,MAAMM,YAAY,GAAG,CACnB;AAAEX,EAAAA,EAAE,EAAE,GAAN;AAAWY,EAAAA,KAAK,EAAE,WAAlB;AAA+BP,EAAAA,KAAK,EAAE;AAAtC,CADmB,EAEnB;AAAEL,EAAAA,EAAE,EAAE,GAAN;AAAWY,EAAAA,KAAK,EAAE,gBAAlB;AAAoCP,EAAAA,KAAK,EAAE;AAA3C,CAFmB,EAGnB;AAAEL,EAAAA,EAAE,EAAE,GAAN;AAAWY,EAAAA,KAAK,EAAE,gBAAlB;AAAoCP,EAAAA,KAAK,EAAE;AAA3C,CAHmB,EAInB;AAAEL,EAAAA,EAAE,EAAE,GAAN;AAAWY,EAAAA,KAAK,EAAE,iBAAlB;AAAqCP,EAAAA,KAAK,EAAE;AAA5C,CAJmB,CAArB,C,CAOA;;AACA,eAAeV,WAAW,CAACe,OAAD,EAAU;AAAEH,EAAAA,KAAK,EAAEI;AAAT,CAAV,CAA1B","sourcesContent":["import { createStore } from \"redux\";\r\n\r\n// The actions are the \"names\" of the changes that can happen to the store\r\nexport const actions = {\r\n  ARCHIVE_TASK: \"ARCHIVE_TASK\",\r\n  PIN_TASK: \"PIN_TASK\"\r\n};\r\n\r\n// The action creators bundle actions with the data required to execute them\r\nexport const archiveTask = id => ({ type: actions.ARCHIVE_TASK, id });\r\nexport const pinTask = id => ({ type: actions.PIN_TASK, id });\r\n\r\n// All our reducers simply change the state of a single task.\r\nfunction taskStateReducer(taskState) {\r\n  return (state, action) => {\r\n    return {\r\n      ...state,\r\n      tasks: state.tasks.map(task =>\r\n        task.id === action.id ? { ...task, state: taskState } : task\r\n      )\r\n    };\r\n  };\r\n}\r\n\r\n// The reducer describes how the contents of the store change for each action\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case actions.ARCHIVE_TASK:\r\n      return taskStateReducer(\"TASK_ARCHIVED\")(state, action);\r\n    case actions.PIN_TASK:\r\n      return taskStateReducer(\"TASK_PINNED\")(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: \"1\", title: \"Something\", state: \"TASK_INBOX\" },\r\n  { id: \"2\", title: \"Something more\", state: \"TASK_INBOX\" },\r\n  { id: \"3\", title: \"Something else\", state: \"TASK_INBOX\" },\r\n  { id: \"4\", title: \"Something again\", state: \"TASK_INBOX\" }\r\n];\r\n\r\n// We export the constructed redux store\r\nexport default createStore(reducer, { tasks: defaultTasks });\r\n"]},"metadata":{},"sourceType":"module"}