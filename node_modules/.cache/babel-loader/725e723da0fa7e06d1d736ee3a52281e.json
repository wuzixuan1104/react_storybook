{"ast":null,"code":"var _jsxFileName = \"/Users/chestnuter/www/React/taskbox/src/components/TaskList.js\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Task from \"./Task\";\nimport { archiveTask, pinTask } from \"../lib/redux\";\n\nfunction TaskList({\n  loading\n}) {\n  const dispatch = useDispatch();\n  const tasks = useSelector(state => state.tasks);\n\n  const handlePinTask = id => {\n    dispatch(pinTask(id));\n  };\n\n  const handleArchiveTask = id => {\n    dispatch(archiveTask(id));\n  };\n\n  const events = {\n    handlePinTask,\n    handleArchiveTask\n  };\n  const LoadingRow = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"glow-checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"glow-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, \"Loading\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 30\n    }\n  }, \"cool\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 48\n    }\n  }, \"state\")));\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list-items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, LoadingRow, LoadingRow, LoadingRow, LoadingRow, LoadingRow, LoadingRow);\n  }\n\n  if (tasks.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list-items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, \"You have no tasks\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"subtitle-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, \"Sit back and relax\")));\n  }\n\n  const tasksInOrder = [...tasks.filter(t => t.state === \"TASK_PINNED\"), ...tasks.filter(t => t.state !== \"TASK_PINNED\")];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list-items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, tasksInOrder.map(task => /*#__PURE__*/React.createElement(Task, Object.assign({\n    key: task.id,\n    task: task\n  }, events, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }))));\n}\n\nTaskList.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"TaskList\"\n};\nexport default TaskList;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/TaskList.js\"] = {\n    name: \"TaskList\",\n    docgenInfo: TaskList.__docgenInfo,\n    path: \"src/components/TaskList.js\"\n  };\n}","map":{"version":3,"sources":["/Users/chestnuter/www/React/taskbox/src/components/TaskList.js"],"names":["React","useSelector","useDispatch","Task","archiveTask","pinTask","TaskList","loading","dispatch","tasks","state","handlePinTask","id","handleArchiveTask","events","LoadingRow","length","tasksInOrder","filter","t","map","task"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,cAArC;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAA+B;AAC7B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAEA,QAAMO,KAAK,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACD,KAAhB,CAAzB;;AAEA,QAAME,aAAa,GAAGC,EAAE,IAAI;AAC1BJ,IAAAA,QAAQ,CAACH,OAAO,CAACO,EAAD,CAAR,CAAR;AACD,GAFD;;AAIA,QAAMC,iBAAiB,GAAGD,EAAE,IAAI;AAC9BJ,IAAAA,QAAQ,CAACJ,WAAW,CAACQ,EAAD,CAAZ,CAAR;AACD,GAFD;;AAIA,QAAME,MAAM,GAAG;AACbH,IAAAA,aADa;AAEbE,IAAAA;AAFa,GAAf;AAKA,QAAME,UAAU,gBACd;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAM,IAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,oBACuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADvB,oBACyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADzC,CAFF,CADF;;AASA,MAAIR,OAAJ,EAAa;AACX,wBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGQ,UADH,EAEGA,UAFH,EAGGA,UAHH,EAIGA,UAJH,EAKGA,UALH,EAMGA,UANH,CADF;AAUD;;AAED,MAAIN,KAAK,CAACO,MAAN,KAAiB,CAArB,EAAwB;AACtB,wBACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,eAGE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAHF,CADF,CADF;AASD;;AAED,QAAMC,YAAY,GAAG,CACnB,GAAGR,KAAK,CAACS,MAAN,CAAaC,CAAC,IAAIA,CAAC,CAACT,KAAF,KAAY,aAA9B,CADgB,EAEnB,GAAGD,KAAK,CAACS,MAAN,CAAaC,CAAC,IAAIA,CAAC,CAACT,KAAF,KAAY,aAA9B,CAFgB,CAArB;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,YAAY,CAACG,GAAb,CAAiBC,IAAI,iBACpB,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEA,IAAI,CAACT,EAAhB;AAAoB,IAAA,IAAI,EAAES;AAA1B,KAAoCP,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CADH,CADF;AAOD;;;;;;;AAED,eAAeR,QAAf","sourcesContent":["import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Task from \"./Task\";\r\nimport { archiveTask, pinTask } from \"../lib/redux\";\r\n\r\nfunction TaskList({ loading }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const tasks = useSelector(state => state.tasks);\r\n\r\n  const handlePinTask = id => {\r\n    dispatch(pinTask(id));\r\n  };\r\n\r\n  const handleArchiveTask = id => {\r\n    dispatch(archiveTask(id));\r\n  };\r\n\r\n  const events = {\r\n    handlePinTask,\r\n    handleArchiveTask\r\n  };\r\n\r\n  const LoadingRow = (\r\n    <div className=\"loading-item\">\r\n      <span className=\"glow-checkbox\" />\r\n      <span className=\"glow-text\">\r\n        <span>Loading</span> <span>cool</span> <span>state</span>\r\n      </span>\r\n    </div>\r\n  );\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"list-items\">\r\n        {LoadingRow}\r\n        {LoadingRow}\r\n        {LoadingRow}\r\n        {LoadingRow}\r\n        {LoadingRow}\r\n        {LoadingRow}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (tasks.length === 0) {\r\n    return (\r\n      <div className=\"list-items\">\r\n        <div className=\"wrapper-message\">\r\n          <span className=\"icon-check\" />\r\n          <div className=\"title-message\">You have no tasks</div>\r\n          <div className=\"subtitle-message\">Sit back and relax</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const tasksInOrder = [\r\n    ...tasks.filter(t => t.state === \"TASK_PINNED\"),\r\n    ...tasks.filter(t => t.state !== \"TASK_PINNED\")\r\n  ];\r\n\r\n  return (\r\n    <div className=\"list-items\">\r\n      {tasksInOrder.map(task => (\r\n        <Task key={task.id} task={task} {...events} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskList;\r\n"]},"metadata":{},"sourceType":"module"}